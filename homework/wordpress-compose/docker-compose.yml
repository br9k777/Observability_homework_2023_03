version: '3.9'

networks:
  traefik-public:
    name: traefik-public
    attachable: true
    driver_opts:
      encrypted: "false"
  cms:
    name: cms
    attachable: true
    driver_opts:
      encrypted: "false"
  metrics:
    name: metrics
    attachable: true
    driver_opts:
      encrypted: "false"
  socat:
    name: monitoring-socat
    internal: true
    attachable: false
    driver_opts:
      encrypted: "false"

volumes:
  mariadb_data:
    name: wordpress_mariadb_${PROJECT}
    driver: local
  wordpress_html_data:
    name: wordpress_html_${PROJECT}
    driver: local
  prometheus:
    name: monitoring_system_prometheus_${PROJECT}
    driver: local
  grafana:
    name: monitoring_system_grafana_${PROJECT}
    driver: local
  loki-data:
    name: monitoring_system_loki_${PROJECT}
    driver: local

x-default-opts:
  &default-opts
  logging:
    driver: loki
    options:
      loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
      loki-retries: "5"
      loki-batch-size: "400"
      loki-external-labels: "project=${PROJECT}"
      max-size: 5g
      max-file: 2

services:
### cms components
  nginx:
    <<: *default-opts
    image: nginx:1.25.1
    restart: on-failure
    networks:
      - traefik-public
      - cms
    volumes:
      - type: bind
        source: ./nginx
        target: /etc/nginx/conf.d
        read_only: false
      - type: volume
        source: wordpress_html_data
        target: /var/www/html
        read_only: false
#    ports:
#      - target: 80
#        published: 8080
#        protocol: tcp
#        mode: host
    links:
      - wordpress
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_nginx.rule=Host(`cms.example.com`)
      - traefik.http.routers.${PROJECT}_nginx.entrypoints=web
      - traefik.http.routers.${PROJECT}_nginx.priority=100
      - traefik.http.services.${PROJECT}_nginx.loadbalancer.server.port=80


  database:
    <<: *default-opts
    image: mariadb:11.1.1-rc-jammy
    restart: on-failure
    networks:
      metrics:
      cms:
    volumes:
      - type: volume
        source: mariadb_data
        target: /var/lib/mysql
        read_only: false
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_MARIA_ROOT_PASS:-justRootPass123}
      MYSQL_DATABASE: db_wordpress
      MYSQL_USER: ${DB_MARIA_USER_LOGIN:-db_user}
      MYSQL_PASSWORD: ${DB_MARIA_USER_PASS:-justUserPass321}


  wordpress:
    <<: *default-opts
    image: wordpress:php7.4-fpm-alpine
    restart: on-failure
    networks:
      - cms
    volumes:
      - type: volume
        source: wordpress_html_data
        target: /var/www/html
        read_only: false
    depends_on:
      - database
    environment:
      WORDPRESS_DB_HOST: database
      MYSQL_ROOT_PASSWORD: ${DB_MARIA_ROOT_PASS:-justRootPass123}
      WORDPRESS_DB_NAME: db_wordpress
      WORDPRESS_DB_USER: ${DB_MARIA_USER_LOGIN:-db_user}
      WORDPRESS_DB_PASSWORD: ${DB_MARIA_USER_PASS:-justUserPass321}
      WORDPRESS_TABLE_PREFIX: wp_
    links:
      - database

  pma:
    <<: *default-opts
    image: phpmyadmin/phpmyadmin:latest
    restart: on-failure
    networks:
      - traefik-public
      - cms
    links:
      - database:db
    ports:
      - host_ip: 127.0.0.1
        target: 80
        published: 8081
        protocol: tcp
        mode: host
    environment:
      PMA_HOST: database
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: ${DB_MARIA_ROOT_PASS:-justRootPass123}
      PMA_ABSOLUTE_URI: http://127.0.0.1/database
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.${PROJECT}_adminer_strip_prefix.stripprefix.prefixes=/database,/database/
      - traefik.http.middlewares.${PROJECT}_adminer_strip_prefix.stripprefix.forceSlash=false
      - traefik.http.routers.${PROJECT}_adminer.middlewares=${PROJECT}_adminer_strip_prefix
      - traefik.http.routers.${PROJECT}_adminer.rule=PathPrefix(`/database`)
      - traefik.http.routers.${PROJECT}_adminer.entrypoints=web
      - traefik.http.routers.${PROJECT}_adminer.priority=1900
      - traefik.http.services.${PROJECT}_adminer.loadbalancer.server.port=80
### exporters

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    command: -logtostderr -docker_only
    labels:
      - prometheus-job=cadvisor
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: false
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: true
    networks:
      - metrics

  node_exporter:
    image: prom/node-exporter
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    labels:
      - prometheus-job=node-exporter
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
    networks:
      - metrics

  mysql_exporter:
    image: prom/mysqld-exporter:v0.14.0
    links:
      - database:mysqldb
    environment:
      DATA_SOURCE_NAME: root:${DB_MARIA_ROOT_PASS:-justRootPass123}@(mysqldb:3306)/?charset=utf8
    command:
      - --collect.global_status
      - --collect.info_schema.innodb_metrics
      - --collect.auto_increment.columns
      - --collect.info_schema.processlist
      - --collect.binlog_size
      - --collect.info_schema.tablestats
      - --collect.global_variables
      - --collect.info_schema.query_response_time
      - --collect.info_schema.userstats
      - --collect.info_schema.tables
      - --collect.perf_schema.tablelocks
      - --collect.perf_schema.file_events
      - --collect.perf_schema.eventswaits
      - --collect.perf_schema.indexiowaits
      - --collect.perf_schema.tableiowaits
      - --collect.slave_status
    labels:
      - prometheus-job=mysql-exporter
    networks:
      - metrics

  blackbox_exporter:
    build: ./blackboxexporter
    command:
      - '--config.file=/etc/blackboxexporter/config.yml'
      - '--web.route-prefix=/blackbox'
    restart: on-failure:3
    ports:
      - host_ip: 127.0.0.1
        target: 9115
        published: 9115
        protocol: tcp
        mode: host
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_blackbox-exporter.rule=PathPrefix(`/blackbox`)
      - traefik.http.routers.${PROJECT}_blackbox-exporter.entrypoints=web
      - traefik.http.routers.${PROJECT}_blackbox-exporter.priority=1500
      - traefik.http.services.${PROJECT}_blackbox-exporter.loadbalancer.server.port=9115
    networks:
      metrics:
        aliases:
          - blackbox
      traefik-public:

### monitoring system
  docker-api-socat:
    image: tecnativa/docker-socket-proxy:0.1
    networks:
      - socat
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CONTAINERS: 1
      NODES: 1
      NETWORKS: 1
      SERVICES: 1
      #TASKS: 1
    logging:
      driver: none

  prometheus:
    <<: *default-opts
    image: prom/prometheus:v2.44.0
    restart: on-failure:3
    networks:
      - traefik-public
      - socat
      - metrics
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    extra_hosts:
      - "cms.example.com:127.0.0.1"
    command:
      - '--config.file=/prometheus.yml'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/prometheus/'
      # for enable reload via POST to /-/reload
      - '--web.enable-lifecycle'
    #      - '--storage.tsdb.path=/prometheus'
    volumes:
      - type: bind
        source: prometheus/prometheus.yml
        target: /prometheus.yml
        read_only: true
      - type: bind
        source: prometheus/alert.rules.yml
        target: /alert.rules.yml
        read_only: true
      - type: volume
        source: prometheus
        target: /prometheus
        read_only: false
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_prometheus.rule=PathPrefix(`/prometheus`)
      - traefik.http.routers.${PROJECT}_prometheus.entrypoints=web
      - traefik.http.routers.${PROJECT}_prometheus.priority=1800
      - traefik.http.services.${PROJECT}_prometheus.loadbalancer.server.port=9090

  alertmanager:
    image: prom/alertmanager:latest
    networks:
      - traefik-public
      - metrics
    ports:
      - host_ip: 127.0.0.1
        target: 9093
        published: 9093
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ./alertmanager/
        target: /etc/alertmanager/
        read_only: false
    restart: on-failure:3
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.route-prefix=/alertmanager'
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_alertmanager.rule=PathPrefix(`/alertmanager`)
      - traefik.http.routers.${PROJECT}_alertmanager.entrypoints=web
      - traefik.http.routers.${PROJECT}_alertmanager.priority=2100
      - traefik.http.services.${PROJECT}_alertmanager.loadbalancer.server.port=9093


  grafana:
    <<: *default-opts
    build:
      args:
        GRAFANA_VERSION: ${GRAFANA_VERSION}
      context: ./grafana
    networks:
      traefik-public:
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-grafana_pass_123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN_NAME:-127.0.0.1}
      - GF_SERVER_ROOT_URL=http://${GRAFANA_DOMAIN_NAME:-127.0.0.1}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - type: volume
        source: grafana
        target: /var/lib/grafana
    restart: on-failure
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_grafana.rule=PathPrefix(`/grafana`)
      - traefik.http.routers.${PROJECT}_grafana.entrypoints=web
      - traefik.http.routers.${PROJECT}_grafana.priority=1900
      - traefik.http.services.${PROJECT}_grafana.loadbalancer.server.port=3000


  loki:
    image: grafana/loki:2.8.2
    networks:
      traefik-public:
    volumes:
      - type: volume
        source: loki-data
        target: /loki
        read_only: false
    ports:
      - host_ip: 127.0.0.1
        target: 3100
        published: 3100
        protocol: tcp
        mode: host
    restart: on-failure
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_loki.rule=PathPrefix(`/loki`)
      - traefik.http.routers.${PROJECT}_loki.entrypoints=web
      - traefik.http.services.${PROJECT}_loki.loadbalancer.server.port=3100


### reverse-proxy
  reverse-proxy:
    <<: *default-opts
    image: traefik:v2.9
    command:
      - --api.dashboard=true
#      - --log.level=INFO
      - --log.format=json
      #      - --log.filePath=/logs/traefik.log
      - --accessLog=true
      - --accesslog.format=json
#      - --accesslog.filters.statuscodes=200,300-302,404,500
#      - --accesslog.filters.retryattempts
      - --accesslog.format=json
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.headers.names.User-Agent=redact
      - --accesslog.fields.headers.names.Authorization=drop
      - --accesslog.fields.headers.names.Content-Type=keep
      #      - --accesslog.filters.minduration=10
      #      - --accesslog.filepath=/logs/access.log
      - --providers.docker=false
#      - --providers.file.directory=/custom/
#      - --providers.file.watch
      - --entrypoints.web.address=:80
#      - --entrypoints.websecure.address=:443
#      - --entrypoints.websecure.http.tls=true
      #      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      #      - --entrypoints.web.http.redirections.entrypoint.priority=1000
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
#      - --providers.docker.endpoint=tcp://dockersocket:2375
      - --providers.docker.endpoint=unix:///var/run/docker.sock
#      - --providers.docker.swarmMode
      - --providers.docker.network=traefik-public
      - --providers.docker.watch
      - --entryPoints.metrics.address=:8082
      - --metrics.prometheus.entryPoint=metrics
    networks:
      traefik-public:
        aliases:
          - traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
#      - target: 443
#        published: 443
#        protocol: tcp
#        mode: host
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: false
    restart: on-failure
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT}_dashboard.rule=(PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.${PROJECT}_dashboard.service=api@internal
      - traefik.http.services.${PROJECT}_dummy-svc.loadbalancer.server.port=9999
      - traefik.http.routers.${PROJECT}_dashboard.entrypoints=web