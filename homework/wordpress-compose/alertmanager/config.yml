global:
  resolve_timeout: 5m
  # The smarthost and SMTP sender used for mail notifications.
#  smtp_smarthost: 'localhost:25'
#  smtp_from: 'minized@gmail.com'

# The root route on which each incoming alert enters.

route:
  # The root route must not have any matchers as it is the entry point for
  # all alerts. It needs to have a receiver configured so alerts that do not
  # match any of the sub-routes are sent to someone.
  receiver: 'telegram'

  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use '...' as the sole label name.
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping. Example: group_by: [...]
  group_by: ['alertname','severity','job']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 1h

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.
  # The child route trees.
  routes:
    - receiver: 'telegram'
      matchers:
      - severity =~ "warning|critical"
    - receiver: 'telegram_without_resolve'
      matchers:
      - severity =~ "notify"

   # This routes performs a regular expression match on alert labels to
   # catch alerts that are related to a list of services.
#    - match_re:
#        service: ^(foo1|foo2|baz)$
#      receiver: team-X-mails

     # The service has a sub-route for critical alerts, any alerts
     # that do not match, i.e. severity != critical, fall-back to the
     # parent node and are sent to 'team-X-mails'
#      routes:
#        - match:
#            severity: critical
#          receiver: team-X-pager
#
#    - match:
#        service: files
#      receiver: team-Y-mails
#
#      routes:
#        - match:
#            severity: critical
#          receiver: team-Y-pager

   # This route handles all alerts coming from a database service. If there's
   # no team to handle it, it defaults to the DB team.
#    - match:
#        service: database
#
#      receiver: team-DB-pager
     # Also group alerts by affected database.
#      group_by: [alertname, cluster, database]
#
#      routes:
#        - match:
#            owner: team-X
#          receiver: team-X-pager
#
#        - match:
#            owner: team-Y
#          receiver: team-Y-pager

receivers:

  - name: 'telegram'
    telegram_configs:
      - bot_token: 6398156954:AAESAHIF8kMofat3sMAJglao8UuzWqDI8a8
        api_url: https://api.telegram.org
        # invite link for chat https://t.me/+5WJ6QCTIjWdiZTYy
        chat_id: -950978852
        parse_mode: ''
#         parse_mode: 'MarkdownV2'
  - name: 'telegram_without_resolve'
    telegram_configs:
      - send_resolved: false
        bot_token: 6398156954:AAESAHIF8kMofat3sMAJglao8UuzWqDI8a8
        api_url: https://api.telegram.org
        # invite link for chat https://t.me/+5WJ6QCTIjWdiZTYy
        chat_id: -950978852
        parse_mode: ''
#         parse_mode: 'MarkdownV2'

#   - name: 'web.hook'
#     webhook_configs:
#       - url: 'http://172.18.0.1:5001/'

# inhibit_rules:
#   - source_match:
#       severity: 'critical'
#     target_match:
#       severity: 'warning'
#     equal: ['alertname', 'dev', 'instance']
